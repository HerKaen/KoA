Vorraussetzungen
	SheBang-Zeile:
		Die erste Zeile enthält den Pfad zum interpretierenden Programm 
		
		#!/bin/bash



	Berechtigungen:
		Damit eine Datei als Programm ausgeführt werden kann, muss das Execute_Bit gesetzt sein, d.h. in den Berechtigungen wird ein x angezeigt

		z.B. chmod u+x test.sh



	Aufruf: 
		Es ist eine absolute Pfadangabe notwendig:

		./test.sh
			Aufruf aus dem aktuellen Ordner


	Kontext Variablen
		Definition:
			trinken='Whisky und Zigarre'
				- Mehr als 1 Wort muss in Anführungszeichen 
				- Zwischen Zuweisung und Variablenname keine Leerzeichen


		Ausgabe:
			echo $trinken
				Definierte Variablen enthalten zu Beginn ein $ - Zeichen.
				Das $-Zeichen bedeutet für den Interpreter generell eine Variable


	
	Variablen  - Intern
		$0 => Der Name der aufgerufenen Datei
		$1 => Der Name des 1. Parameters (z.B. ./test.sh 'Hallo')
		$# => Anzahl der Skrips-Kommandos
		$? => Exit-Status des letzten Befehls; Wurde der letzte Befehl erfolgreich 		
			  ausgeführt.


	Kommandosubstitution
		echo `date`
		echo $(date)
			Der Shell-befehl date wird ausgeführt und anschließend an das Programm echo übergeben.



	Kommandos in Variablen
		remove='rm test.txt'
		$remove



	String-Konkatenierung
		string_1='Heia und '
		string_2=Popeia
		------------------------------------------------------------
		string="${string_1} ${string_2} was raschelt im Stroh?"     
		echo $string

		ODER 

		echo "$string_1 $string_2 aber im Heu"
		
	IF-Anweisung
		read -p "Bitte geben Sie Vor und Zunamen ein: " var

		echo "Die Eingabe lautete: $var"

		if [[ $var = "q" ]]
		then
        	echo "Ist ein Q!"
		elif [[ $var = "m" ]]
		then
        	echo "Jo, ein M!"
		else
        	echo "Irgendwas anderes!"
		fi



	Schleifen
		#!/bin/bash

		while [[ $eingabe -ne 1 ]]
		do
        	read -p "Mach Eingabe: " eingabe
        	echo $eingabe
		done



	Operatoren
		[[ $var ]]				true falls in $var etwas steht außer false oder 0
		[[ wer1 -eq wert2 ]]	true wenn wert1 gleich wert2
		[[ wert1 -ne wert2 ]]	true wenn wert1 nicht gleich wert2
		[[ wert1 -gt wert2 ]]	true wenn wert1 größer als wert2
		[[ wert1 -lt wert2 ]]	true wenn wert1 kleiner als wert2

		[[ -e $dateiname ]]		true wenn Datei vorhanden ist
		[[ -d $verzeichnis ]]	true wenn Verzeichnis vorhanden ist


	
	Aufgabe:
		Erstellen Sie ein Skript, das einen Parameter entgegennimmt und checkt ob es eine Datei gibt, die so heißt wie der übergebene Parameter.
		Aufruf : ./test.sh test.txt

		Erweiterung:
		Die Eingabeaufforderung soll solange gezeigt werden, bis der Benutzer ein q eingibt, oder einen vorhandenen Dateinamen

#!/bin/bash

if [[ $1 ]]
then

var=$1

if [[ -e $var ]]
then
        echo "Die Eingabe lautete: $var"
        echo "Datei vorhanden"
else
        echo "Die Eingabe lautete: $var"
        echo "Datei nicht vorhanden"
fi

else

read -p "Eingabe: " var

        echo "Die Eingabe lautete: $var"

if [[ -e $var ]]
then
        echo "Datei vorhanden"
else
        echo "Datei nicht vorhanden"
fi
fi

-----------------------------------------------------------------------

BOGNER:

Operatoren
	[[ $var ]] 			true falls in $var etwas steht außer false oder 0
	[[ !$var ]]			true falls $var ist 0, false, oder leer

	Strings
	[[ wert1 = 'string' ]]  gibt true wenn wert1 gleich Zeichenkette ist
	[[ wert1 != 'string' ]] gitt true wenn wert1 ungleich Zeichenkette ist

	arithmetrische Werte
	[[ wert1 -eq wert2 ]]	gibt true wenn wert1 gleich wert2
	[[ wert1 -ne wert2 ]]	gibt true wenn wert1 ungleich wert2
	[[ wert1 -gt wert2 ]]	gibt true wenn wert1 größer wert2
	[[ wert1 -lt wert2 ]]	gibt true wenn wert1 kleiner wert2
	
	Systemoperationen
	[[ -e $dateiname ]] 	gibt true wenn Datei vorhanden ist
[[ -d $verzeichnis ]] gibt true wenn Verzeichnis vorhanden